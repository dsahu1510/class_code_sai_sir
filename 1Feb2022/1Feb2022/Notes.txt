Validations:

1. Basic Validations 
2. Advanced Validations : Regular Expressions 

REs are used to create Search Patterns.

syntax:

 var pattern= /<pattern>/ <modifier>

 Modifiers:

 g - global modifier
 var str="hello how are you doing? stay home stay safe";
var  pattern= /h/g;
console.log(str.match(pattern).length);

i - case insensitivity

var str="Hello How are you doing? stay home stay safe";
var  pattern= /h/gi;
console.log(str.match(pattern).length);

Brackets:

[abc]:

var str="hellozk";
var  pattern= /o[xyz]k/;
console.log(pattern.test(str));


[^abc]:

var str="x1";
var  pattern= /[^xyz]/;
console.log(pattern.test(str));

[0-9]:

var str="x1";
var  pattern= /[0-6]/;
console.log(pattern.test(str));

[^0-9]:
var str="10s";
var  pattern= /[^0-6]/;
console.log(pattern.test(str));

Meta Characters:

. (Dot): 

var str="&";
var  pattern= /./;
console.log(pattern.test(str));

Create a pattern that accept emailIds with the format 
@gmail.com

// var str="&";
// var  pattern= /./;
// console.log(pattern.test(str));


var str="sonia.jain@gmail.com";
var pattern=/@gmail[.]com/i;
console.log(pattern.test(str));


var str="&";
var pattern=/\w/;
console.log(pattern.test(str));


var str="1";
var pattern=/\W/;
console.log(pattern.test(str));



var str="hello ";
var pattern=/\s/;
console.log(pattern.test(str));


Quantifiers:

var str="qAAAAAAAAsasaaxcss";
var pattern=/[A-Z]+/;
console.log(pattern.test(str));


var str="jbjmbkjA";
var pattern=/[A-Z]*/;
console.log(pattern.test(str)); 


var str="SAAAAAAAM";
var pattern=/S[A-Z]?M/;
console.log(pattern.test(str));


var str="S0000M";
var pattern=/S[0-9]{2,3}M/;
console.log(pattern.test(str));



var str="S0M";
var pattern=/S[0-9]{2,}M/;
console.log(pattern.test(str));


var str="A1H";
var pattern=/^[A-Z]{1,3}[0-9]+H$/;
console.log(pattern.test(str));


// PS:  

Create a regular expression pattern that follows the constraints.

1 uppercase , 1 lower case, 1 digit, 1 special symbol, 8 chars